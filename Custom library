local KavoUI = {}

local function createInstance(instanceType, parent, properties)
    local inst = Instance.new(instanceType)
    for prop, value in pairs(properties) do
        inst[prop] = value
    end
    inst.Parent = parent
    return inst
end

-- Main UI creation
function KavoUI:CreateUI(parent)
    local Main = createInstance("Frame", parent, {
        Size = UDim2.new(0.6, 0, 0.8, 0),
        Position = UDim2.new(0.2, 0, 0.1, 0),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
        Name = "KavoMainUI"
    })

    -- Title
    local Title = createInstance("TextLabel", Main, {
        Text = "Kavo UI",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamBold,
        TextSize = 24,
        TextXAlignment = Enum.TextXAlignment.Center
    })

    -- Tabs container
    local TabsFrame = createInstance("Frame", Main, {
        Size = UDim2.new(1, 0, 0, 50),
        Position = UDim2.new(0, 0, 0, 50),
        BackgroundTransparency = 1
    })

    -- Content container
    local ContentFrame = createInstance("Frame", Main, {
        Size = UDim2.new(1, 0, 1, -100),
        Position = UDim2.new(0, 0, 0, 100),
        BackgroundTransparency = 1
    })

    -- Table to hold tabs
    local Tabs = {}

    -- Function to create tabs
    function KavoUI:CreateTab(name)
        local tabButton = createInstance("TextButton", TabsFrame, {
            Text = name,
            Size = UDim2.new(0, 100, 1, 0),
            BackgroundColor3 = Color3.fromRGB(40, 40, 40),
            TextColor3 = Color3.new(1, 1, 1),
            Font = Enum.Font.GothamMedium,
            TextSize = 16,
            BorderSizePixel = 0
        })

        local sectionContainer = createInstance("Frame", ContentFrame, {
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1,
            Visible = false
        })

        -- Store in Tabs table
        Tabs[name] = {
            Button = tabButton,
            Section = sectionContainer
        }

        -- Button click logic
        for tabName, tabData in pairs(Tabs) do
            tabData.Button.MouseButton1Click:Connect(function()
                -- Hide all sections
                for _, t in pairs(Tabs) do
                    t.Section.Visible = false
                end
                -- Show selected
                tabData.Section.Visible = true
            end)
        end

        return Tabs[name]
    end

    return {
        Main = Main,
        Title = Title,
        Tabs = Tabs,
        Content = ContentFrame,
        CreateTab = function(name)
            return KavoUI:CreateTab(name)
        end
    }
end

-- Title component
function KavoUI:CreateTitle(parent, text)
    return createInstance("TextLabel", parent, {
        Text = text,
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextXAlignment = Enum.TextXAlignment.Left
    })
end

-- Section component
function KavoUI:CreateSection(parent, title)
    local section = createInstance("Frame", parent, {
        Size = UDim2.new(1, 0, 0, 150),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0
    })

    -- Section title
    self:CreateTitle(section, title)

    -- Container for elements
    local container = createInstance("Frame", section, {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundTransparency = 1
    })

    return container
end

-- Button component
function KavoUI:CreateButton(parent, text, callback)
    local btn = createInstance("TextButton", parent, {
        Text = text,
        Size = UDim2.new(0, 120, 0, 40),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamMedium,
        TextSize = 16,
        BorderSizePixel = 0
    })

    if callback then
        btn.MouseButton1Click:Connect(callback)
    end

    return btn
end

-- Checkbox component
function KavoUI:CreateCheckbox(parent, labelText, default, callback)
    local container = createInstance("Frame", parent, {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1
    })

    local box = createInstance("Frame", container, {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(0, 0, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        BorderSizePixel = 0
    })

    local check = createInstance("Frame", box, {
        Size = UDim2.new(1, -4, 1, -4),
        Position = UDim2.new(0, 2, 0, 2),
        BackgroundColor3 = Color3.fromRGB(0, 170, 0),
        BorderSizePixel = 0,
        Visible = default or false
    })

    local label = createInstance("TextLabel", container, {
        Text = labelText,
        Size = UDim2.new(1, -25, 1, 0),
        Position = UDim2.new(0, 25, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local toggled = default or false

    container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            check.Visible = toggled
            if callback then
                callback(toggled)
            end
        end
    end)

    -- Alternatively, add click detection
    container.Active = true
    container.Selectable = true

    container.MouseButton1Click = function()
        toggled = not toggled
        check.Visible = toggled
        if callback then
            callback(toggled)
        end
    end

    return {
        Toggle = function(state)
            toggled = state
            check.Visible = toggled
        end,
        IsChecked = function()
            return toggled
        end
    }
end

return KavoUI
